// Note: This is also used from the ObjectTests.cpp to test static fields.

class {
  constant_pool {
    1: ClassInfo "PutGetStatic"
    2: ClassInfo "java/lang/Object"
    3: NameAndType "F2" "D"
    4: NameAndType "F1" "I"
    5: FieldRef #1 #3
    6: FieldRef #1 #4

    auto: "main"
    auto: "test1"
    auto: "test2"
    auto: "test3"
    auto: "test4"
    auto: "()I"
    auto: "()D"
    auto: "F2"
    auto: "D"
    auto: "F1"
    auto: "I"
    auto: "F3"
    auto: "S"
    auto: "LPutGetStatic;"
    auto: "Ref"
  }

  Name: #1
  Super: #2

  fields {
    public static "I": "F1"
    public static "D": "F2"
    public static "S": "F3"
    public static "LPutGetStatic;": "Ref"
  }

  // Check that static variable is zero initialized
  // Expect result: 0
  method "test1" "()I" {
    Flags: public, static
    MaxStack: 2
    MaxLocals: 1

    bytecode {
      getstatic #6 // Field F1:I
      ireturn
    }
  }

  // Check that static variable is zero initialized
  // Expect result: 0
  method "test2" "()D" {
    Flags: public, static
    MaxStack: 2
    MaxLocals: 1

    bytecode {
      getstatic #5 // Field F2:D
      dreturn
    }
  }

  // Check that we can correctly store and load value
  // Expect result: 1
  method "test3" "()I" {
    Flags: public, static
    MaxStack: 2
    MaxLocals: 1

    bytecode {
      iconst_1
      putstatic #6 // Field F1:I
      getstatic #6 // Field F1:I
      ireturn
    }
  }

  // Check that we can correctly store and load value
  // Expect result: 1
  method "test4" "()D" {
    Flags: public, static
    MaxStack: 2
    MaxLocals: 1

    bytecode {
      dconst_1
      putstatic #5 // Field F2:D
      getstatic #5 // Field F2:D
      dreturn
    }
  }

}
